#include "ysMaterialStandard.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysMaterialStandard::EvaluateBRDF(const ysVec4& incomingDirectionLS, const ysVec4& outgoingDirectionLS) const
{
    return m_albedoDiffuse / ysVec4_pi;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysMaterialStandard::EvaluateEmittedRadiance(const ysVec4& direction, const ysVec4& normal, const ysVec4& tangent) const
{
    return m_emissiveDiffuse;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysMaterialStandard::EvaluateEmittedIrradiance() const
{
    return m_emissiveDiffuse * ysVec4_pi;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ysMaterialStandard::IsEmissive() const
{
    return m_emissiveDiffuse != ysVec4_zero;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ysMaterialStandard::GenerateRandomDirection(const ysVec4& incomingLS, ysVec4* outgoingLS, ys_float32* probabilityDensity) const
{
    // Importance sample pdf(theta) = cos(theta)/pi
    //                   cdf(theta) = (1-cos(2*theta))/2
    ys_float32 u = ysRandom(0.0f, 1.0f);
    ys_float32 v = ysRandom(0.0f, 1.0f);
    ys_float32 phi = ys_2pi * u;
    ys_float32 cosTheta = sqrtf(1.0f - v);
    ys_float32 sinTheta = sqrtf(v);
    *outgoingLS = ysVecSet(sinTheta * cosf(phi), sinTheta * sinf(phi), cosTheta);
    *probabilityDensity = cosTheta / ys_pi;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ysMaterialStandard::GenerateRandomDirection(ysVec4* incomingLS, const ysVec4& outgoingLS, ys_float32* probabilityDensity) const
{
    GenerateRandomDirection(outgoingLS, incomingLS, probabilityDensity);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ysMaterialStandard::GenerateRandomEmission(ysVec4* emittedDirectionLS, ys_float32* probabilityDensity) const
{
    ys_float32 phi = ys_2pi * ysRandom(0.0f, 1.0f);
    ys_float32 cosTheta = ysRandom(0.0f, 1.0f);
    ys_float32 sinTheta = sqrtf(ysMax(0.0f, 1.0f - cosTheta * cosTheta));
    *emittedDirectionLS = ysVecSet(sinTheta * cosf(phi), sinTheta * sinf(phi), cosTheta);
    *probabilityDensity = 1.0f / ys_2pi;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ys_float32 ysMaterialStandard::ProbabilityDensityForGeneratedDirection(const ysVec4& outLS, const ysVec4& inLS) const
{
    ysAssert(ysAbs(ysLength3(outLS) - 1.0f) < 0.001f)
    return ysMax(outLS.z, 0.0f) / ys_pi;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ys_float32 ysMaterialStandard::ProbabilityDensityForGeneratedEmission(const ysVec4& emittedDirectionLS) const
{
    return (emittedDirectionLS.z > 0.0f) ? 1.0f / ys_2pi : 0.0f;
}