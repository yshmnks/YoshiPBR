#include "ysMaterialMirror.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysBSDF ysMaterialMirror::EvaluateBRDF(const ysVec4&, const ysVec4&) const
{
    ysBSDF f;
    f.m_value = ysVec4_zero;
    f.m_isFinite = true;
    return f;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysDirectionalProbabilityDensity ysMaterialMirror::GenerateRandomDirection(const ysVec4& w_i, ysVec4* w_o, ysBSDF* f) const
{
    ysAssert(ysIsApproximatelyNormalized3(w_i));
    if (w_i.z <= 0.0f)
    {
        f->m_value = ysVec4_zero;
        f->m_isFinite = true;
    }
    else
    {
        f->m_value = ysVec4_one;
        f->m_isFinite = false;
    }
    *w_o = ysVecSet(-w_i.x, -w_i.y, w_i.z, 0.0f);
    ysDirectionalProbabilityDensity p;
    p.m_perProjectedSolidAngle.m_value = 1.0f;
    p.m_perProjectedSolidAngle.m_isFinite = false;
    p.m_perSolidAngle.m_value = ysClamp(w_i.z, 0.0f, 1.0f);
    p.m_perSolidAngle.m_isFinite = false;
    return p;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysDirectionalProbabilityDensity ysMaterialMirror::GenerateRandomDirection(ysVec4* w_i, const ysVec4& w_o, ysBSDF* f) const
{
    return GenerateRandomDirection(w_o, w_i, f);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysDirectionalProbabilityDensity ysMaterialMirror::GenerateRandomDirection(const ysVec4& w_i, ysVec4* w_o, ysBSDF* f, ysDirectionalProbabilityDensity* pReverse) const
{
    *pReverse = GenerateRandomDirection(w_i, w_o, f);
    return *pReverse;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysDirectionalProbabilityDensity ysMaterialMirror::GenerateRandomDirection(ysVec4* w_i, const ysVec4& w_o, ysBSDF* f, ysDirectionalProbabilityDensity* pReverse) const
{
    *pReverse = GenerateRandomDirection(w_i, w_o, f);
    return *pReverse;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysDirectionalProbabilityDensity ysMaterialMirror::ProbabilityDensityForGeneratedIncomingDirection(const ysVec4& w_i, const ysVec4& w_o) const
{
    return ProbabilityDensityForGeneratedOutgoingDirection(w_o, w_i);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysDirectionalProbabilityDensity ysMaterialMirror::ProbabilityDensityForGeneratedOutgoingDirection(const ysVec4&, const ysVec4&) const
{
    ysDirectionalProbabilityDensity p;
    p.m_perSolidAngle.m_value = 0.0f;
    p.m_perSolidAngle.m_isFinite = true;
    p.m_perProjectedSolidAngle.m_value = 0.0f;
    p.m_perProjectedSolidAngle.m_isFinite = true;
    return p;
}