#include "YoshiPBR/ysMath.h"

#include <algorithm>

const ysVec4 ysQuat_identity = { 0.0f, 0.0f, 0.0f, 1.0f };
const ysVec4 ysVec4_zero = { 0.0f, 0.0f, 0.0f, 0.0f };
const ysVec4 ysVec4_half = { 0.5f, 0.5f, 0.5f, 0.5f };
const ysVec4 ysVec4_one = { 1.0f, 1.0f, 1.0f, 1.0f };
const ysVec4 ysVec4_two = { 2.0f, 2.0f, 2.0f, 2.0f };
const ysVec4 ysVec4_pi = { ys_pi, ys_pi, ys_pi, ys_pi };
const ysVec4 ysVec4_2pi = { ys_2pi, ys_2pi, ys_2pi, ys_2pi };
const ysVec4 ysVec4_maxFloat = { ys_maxFloat, ys_maxFloat, ys_maxFloat, ys_maxFloat };
const ysVec4 ysVec4_unitX = { 1.0f, 0.0f, 0.0f, 0.0f };
const ysVec4 ysVec4_unitY = { 0.0f, 1.0f, 0.0f, 0.0f };
const ysVec4 ysVec4_unitZ = { 0.0f, 0.0f, 1.0f, 0.0f };
const ysVec4 ysVec4_unitW = { 0.0f, 0.0f, 0.0f, 1.0f };
const ysTransform ysTransform_identity = { ysVec4_zero, ysQuat_identity };
const ysMtx44 ysMtx44_zero = { ysVec4_zero, ysVec4_zero, ysVec4_zero, ysVec4_zero };
const ysMtx44 ysMtx44_identity = { ysVec4_unitX, ysVec4_unitY, ysVec4_unitZ, ysVec4_unitW };

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysVecSet(ys_float32 x, ys_float32 y, ys_float32 z, ys_float32 w)
{
    ysVec4 v;
    v.simd = _mm_setr_ps(x, y, z, w);
    return v;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysVecSet(ys_float32 x, ys_float32 y, ys_float32 z)
{
    ysVec4 v;
    v.simd = _mm_setr_ps(x, y, z, 0.0f);
    return v;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysVecSet(ys_float32 x, ys_float32 y)
{
    ysVec4 v;
    v.simd = _mm_setr_ps(x, y, 0.0f, 0.0f);
    return v;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysVecSet(ys_float32 x)
{
    ysVec4 v;
    v.simd = _mm_setr_ps(x, 0.0f, 0.0f, 0.0f);
    return v;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysSplat(ys_float32 x)
{
    ysVec4 v;
    v.simd = _mm_setr_ps(x, x, x, x);
    return v;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysSplatX(const ysVec4& xyzw)
{
    ysVec4 xxxx;
    xxxx.simd = _mm_shuffle_ps(xyzw.simd, xyzw.simd, _MM_SHUFFLE(0, 0, 0, 0));
    return xxxx;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysSplatY(const ysVec4& xyzw)
{
    ysVec4 yyyy;
    yyyy.simd = _mm_shuffle_ps(xyzw.simd, xyzw.simd, _MM_SHUFFLE(1, 1, 1, 1));
    return yyyy;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysSplatZ(const ysVec4& xyzw)
{
    ysVec4 zzzz;
    zzzz.simd = _mm_shuffle_ps(xyzw.simd, xyzw.simd, _MM_SHUFFLE(2, 2, 2, 2));
    return zzzz;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysSplatW(const ysVec4& xyzw)
{
    ysVec4 wwww;
    wwww.simd = _mm_shuffle_ps(xyzw.simd, xyzw.simd, _MM_SHUFFLE(3, 3, 3, 3));
    return wwww;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysMin(const ysVec4& a, const ysVec4& b)
{
    ysVec4 c;
    c.simd = _mm_min_ps(a.simd, b.simd);
    return c;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysMax(const ysVec4& a, const ysVec4& b)
{
    ysVec4 c;
    c.simd = _mm_max_ps(a.simd, b.simd);
    return c;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysClamp(const ysVec4& unclamped, const ysVec4& min, const ysVec4& max)
{
    return ysMin(ysMax(min, unclamped), max);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysAbs(const ysVec4& a)
{
    return ysMax(a, -a);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ysAllLT3(const ysVec4& a, const ysVec4& b)
{
    return a.x < b.x && a.y < b.y && a.z < b.z;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ysAllLE3(const ysVec4& a, const ysVec4& b)
{
    return a.x <= b.x && a.y <= b.y && a.z <= b.z;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ysAllEQ3(const ysVec4& a, const ysVec4& b)
{
    return a.x == b.x && a.y == b.y && a.z == b.z;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ysAllGE3(const ysVec4& a, const ysVec4& b)
{
    return a.x >= b.x && a.y >= b.y && a.z >= b.z;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ysAllGT3(const ysVec4& a, const ysVec4& b)
{
    return a.x >= b.x && a.y >= b.y && a.z >= b.z;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 operator-(const ysVec4& a)
{
    return ysVec4_zero - a;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 operator+(const ysVec4& a, const ysVec4& b)
{
    ysVec4 c;
    c.simd = _mm_add_ps(a.simd, b.simd);
    return c;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 operator-(const ysVec4& a, const ysVec4& b)
{
    ysVec4 c;
    c.simd = _mm_sub_ps(a.simd, b.simd);
    return c;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 operator*(const ysVec4& a, const ysVec4& b)
{
    ysVec4 c;
    c.simd = _mm_mul_ps(a.simd, b.simd);
    return c;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 operator/(const ysVec4& a, const ysVec4& b)
{
    ysVec4 c;
    c.simd = _mm_div_ps(a.simd, b.simd);
    return c;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysSplatDot4(const ysVec4& a, const ysVec4& b)
{
    ysVec4 ab = a * b;
    return ysSplatX(ab) + ysSplatY(ab) + ysSplatZ(ab) + ysSplatW(ab);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysSplatDot3(const ysVec4& a, const ysVec4& b)
{
    ysVec4 ab = a * b;
    return ysSplatX(ab) + ysSplatY(ab) + ysSplatZ(ab);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ys_float32 ysDot4(const ysVec4& a, const ysVec4& b)
{
    ysVec4 ab = a * b;
    return ab.x + ab.y + ab.z + ab.w;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ys_float32 ysDot3(const ysVec4& a, const ysVec4& b)
{
    ysVec4 ab = a * b;
    return ab.x + ab.y + ab.z;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ys_float32 ysLengthSqr4(const ysVec4& v)
{
    return ysDot4(v, v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ys_float32 ysLengthSqr3(const ysVec4& v)
{
    return ysDot3(v, v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ys_float32 ysLength4(const ysVec4& v)
{
    return sqrtf(ysLengthSqr4(v));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ys_float32 ysLength3(const ysVec4& v)
{
    return sqrtf(ysLengthSqr3(v));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ysIsSafeToNormalize4(const ysVec4& v)
{
    return ysLengthSqr4(v) > (ys_epsilon * ys_epsilon);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ysIsSafeToNormalize3(const ysVec4& v)
{
    return ysLengthSqr3(v) > (ys_epsilon * ys_epsilon);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysNormalize4(const ysVec4& v)
{
    return v / ysSplat(ysLength4(v));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysNormalize3(const ysVec4& v)
{
    return v / ysSplat(ysLength3(v));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysCross(const ysVec4& a, const ysVec4& b)
{
    return ysVecSet
    (
        a.y * b.z - a.z * b.y,
        a.z * b.x - a.x * b.z,
        a.x * b.y - a.y * b.x
    );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysConjugate(const ysVec4& q)
{
    return ysVecSet(-1.0f, -1.0f, -1.0f, 1.0f) * q;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysQuatFromAxisAngle(const ysVec4& axis, float angle)
{
    ys_float32 halfAngle = angle * 0.5f;
    ys_float32 s = sinf(halfAngle);
    ys_float32 c = cosf(halfAngle);
    ysVec4 q = axis * ysSplat(s);
    q.w = c;
    return q;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysQuatFromUnitVectors(const ysVec4& src, const ysVec4& dst)
{
    const float angleTol = ys_pi / 180.0f;
    const float sinAngleTol = sinf(angleTol);

    ysVec4 scaledAxis = ysCross(src, dst); // sin(angle)*axis
    ys_float32 cosAngle = ysDot3(src, dst);
    ys_float32 sinAngleSqr = ysLengthSqr3(scaledAxis);
    if (sinAngleSqr > angleTol * angleTol)
    {
        // q = normalize([sin(angle)*axis, sin(angle)*cot(angle/2)])
        //   = normalize([scaledAxis, 1+cosAngle])
        ysVec4 q = scaledAxis;
        q.w = 1 + cosAngle;
        return ysNormalize4(q);
    }

    if (cosAngle > 0.0f)
    {
        return ysQuat_identity;
    }
    
    // Construct a vector orthogonal to src
    ysVec4 srcSqr = src * src;
    if (srcSqr.x >= srcSqr.y && srcSqr.x >= srcSqr.z)
    {
        return ysNormalize3(ysVecSet(-src.y, src.x, 0.0f, 0.0f));
    }
    else if (srcSqr.y >= srcSqr.z && srcSqr.y >= srcSqr.x)
    {
        return ysNormalize3(ysVecSet(0.0f, -src.z, src.y, 0.0f));
    }
    else
    {
        return ysNormalize3(ysVecSet(src.z, 0.0f, -src.x, 0.0f));
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysMtx44 ysMtxFromQuat(const ysVec4& q)
{
    ysTransform xf;
    xf.p = ysVec4_zero;
    xf.q = q;
    return ysMtxFromTransform(xf);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysMtx44 ysMtxFromTransform(const ysTransform& xf)
{
    const ysVec4& q = xf.q;
    ysVec4 qq = q * q;
    const ys_float32& xx = qq.x;
    const ys_float32& yy = qq.y;
    const ys_float32& zz = qq.z;
    const ys_float32& ww = qq.w;
    ys_float32 xy = q.x * q.y;
    ys_float32 zw = q.z * q.w;
    ys_float32 xz = q.x * q.z;
    ys_float32 yw = q.y * q.w;
    ys_float32 yz = q.y * q.z;
    ys_float32 wx = q.w * q.x;

    ysMtx44 m;
    m.cx.x = 1.0f - 2.0f * (yy + zz);
    m.cx.y = 2.0f * (xy + zw);
    m.cx.z = 2.0f * (xz - yw);
    m.cx.w = 0.0f;
    m.cy.x = 2.0f * (xy - zw);
    m.cy.y = 1.0f - 2.0f * (zz + xx);
    m.cy.z = 2.0f * (yz + wx);
    m.cy.w = 0.0f;
    m.cz.x = 2.0f * (xz + yw);
    m.cz.y = 2.0f * (yz - wx);
    m.cz.z = 1.0f - 2.0f * (xx + yy);
    m.cz.w = 0.0f;
    m.cw = xf.p;
    m.cw.w = 1.0f;
    return m;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysTransform ysInvert(const ysTransform& xf)
{
    ysTransform inv;
    inv.q = ysConjugate(xf.q);
    inv.p = -ysRotate(inv.q, xf.p);
    return inv;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysRotate(const ysVec4& q, const ysVec4& v)
{
    //https://gamedev.stackexchange.com/a/50545
    ysVec4 u = ysVecSet(q.x, q.y, q.z, 0.0f);
    ysVec4 s = ysSplatW(q);
    return 
        ysVec4_two * ysSplat(ysDot3(u, v)) * u +
        (s * s - ysSplat(ysDot3(u, u))) * v +
        ysVec4_two * s * ysCross(u, v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysMulQQ(const ysVec4& p, const ysVec4& q)
{
    ysVec4 pq = ysSplatW(p) * q + ysSplatW(q) * p + ysCross(p, q);
    pq.w = p.w * q.w - ysDot3(p, q);
    return pq;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysTransform ysMul(const ysTransform& xf2, const ysTransform& xf1)
{
    ysTransform xf;
    xf.q = ysMulQQ(xf2.q, xf1.q);
    xf.p = ysRotate(xf2.q, xf1.p) + xf2.p;
    return xf;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysMul(const ysTransform& xf, const ysVec4& p)
{
    return xf.p + ysRotate(xf.q, p);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysRandom3(const ysVec4& min, const ysVec4& max)
{
    ysVec4 r = ysVecSet(
        (ys_float32)std::rand() / RAND_MAX,
        (ys_float32)std::rand() / RAND_MAX,
        (ys_float32)std::rand() / RAND_MAX);
    return r * min + (ysVec4_one - r) * max;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysRandomDir()
{
    ys_float32 u = (ys_float32)std::rand() / RAND_MAX;
    ys_float32 v = (ys_float32)std::rand() / RAND_MAX;
    ys_float32 phi = ys_2pi * u;
    ys_float32 cosTheta = 2.0f * v - 1.0f;
    ys_float32 sinTheta = sqrtf(ysMax(0.0f, 1.0f - cosTheta * cosTheta));
    return ysVecSet(sinTheta * cosf(phi), sinTheta * sinf(phi), cosTheta);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysVec4 ysRandomQuat()
{
    ys_float32 r = (ys_float32)std::rand() / RAND_MAX;
    ys_float32 angle = ys_2pi * r;
    ysVec4 axis = ysRandomDir();
    return ysQuatFromAxisAngle(axis, angle);
}