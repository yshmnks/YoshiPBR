#include "ysWorker.h"
#include "ysWorkerManager.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ysWorker::Submit(ysJob* job)
{
    m_jobQueue.Push(job);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ysWorker::Wait(ysWorkerManager* mgr, ysJob* blockingJob)
{
    while (blockingJob->IsFinished() == false)
    {
        ysJob* job = GetJob(mgr);
        if (job != nullptr)
        {
            job->Execute();
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysJob* ysWorker::GetJob(ysWorkerManager* mgr)
{
    ysJob* ownJob = m_jobQueue.Pop();
    if (ownJob != nullptr)
    {
        return ownJob;
    }

    ysWorker* coworker = mgr->GetRandomWorker();
    if (coworker == nullptr || coworker == this)
    {
        std::this_thread::yield();
        return nullptr;
    }

    ysJob* stolenJob = coworker->m_jobQueue.Steal();
    if (stolenJob == nullptr)
    {
        std::this_thread::yield();
        return nullptr;
    }
    return stolenJob;
}