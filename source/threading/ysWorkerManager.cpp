#include "ysWorkerManager.h"
#include <cstdlib>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ysWorkerManager::Reset()
{
    m_workerCount = 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ysWorkerManager::Create(ys_int32 workerCount)
{
    ysAssert(workerCount <= ysWORKERMANAGER_CAPACITY);
    m_workerCount = workerCount;
    for (ys_int32 i = 0; i < workerCount; ++i)
    {
        m_workers[i].Reset();
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysWorker* ysWorkerManager::GetRandomWorker()
{
    if (m_workerCount == 0)
    {
        return nullptr;
    }
    ys_int32 idx = std::rand() % m_workerCount;
    return m_workers + idx;
}