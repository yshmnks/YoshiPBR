#pragma once

#include "YoshiPBR/ysStructures.h"

struct ysLock;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ysSceneId ysScene_Create(const ysSceneDef&);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// User is responsible for disposing of their copy of the scene ID.
// A freed scene ID may be repurposed by future scene creations, so the freed ID may not only become invalid, but worse, misdirected.
void ysScene_Destroy(ysSceneId);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This API is not recommended unless rendering some very basic debug info such as depth/normals, or if you know beforehand that you wish to
// run the render to completion. When iterating, you may likely wish to process halfway when iterating; in that case, prefer instead to kick
// off a render on a separate thread and sporadically query for the intermediate state.
void ysScene_Render(ysSceneId, ysSceneRenderOutput*, const ysSceneRenderInput&);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Debug a single pixel. Pixel (0,0) corresponds to the top left corner of the image.
ysVec4 ysScene_DebugRenderPixel(ysSceneId, const ysSceneRenderInput&, const ys_float32 pixelX, const ys_float32 pixelY);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Async API:
// These should be called in the order in which they are listed. 'BeginWork' spins up a new thread; at any point while working, call
// 'GetIntermediateOutput' to inspect the partially-completed image and query for whether work is done with 'WorkFinished.' Once work is
// is completed, use 'GetFinalOutput' to build the post-processed image.
ysRenderId ysScene_CreateRender(ysSceneId, const ysSceneRenderInput&);
void ysRender_BeginWork(ysRenderId);
void ysRender_GetIntermediateOutput(ysRenderId, ysSceneRenderOutputIntermediate*);
bool ysRender_WorkFinished(ysRenderId);
void ysRender_GetFinalOutput(ysRenderId, ysSceneRenderOutput*);
void ysScene_DestroyRender(ysRenderId);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ys_int32 ysScene_GetBVHDepth(ysSceneId);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ysScene_DebugDrawBVH(ysSceneId, const ysDrawInputBVH&);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ysScene_DebugDrawGeo(ysSceneId, const ysDrawInputGeo&);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ysScene_DebugDrawLights(ysSceneId, const ysDrawInputLights&);