#pragma once

#include "YoshiPBR/ysTypes.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
struct ysArrayG
{
public:
    ysArrayG();
    ~ysArrayG();
    void Create();
    void Destroy();
    void SetCapacity(ys_int32);
    void SetCount(ys_int32);
    void PushBack(const T&);
    T* Allocate();
    T* GetEntries();
    ys_int32 GetCapacity() const;
    ys_int32 GetCount() const;
    T& operator[](ys_int32);
    const T& operator[](ys_int32) const;
private:
    T* m_entries;
    ys_int32 m_capacity;
    ys_int32 m_count;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
ysArrayG<T>::ysArrayG()
{
    Create();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
ysArrayG<T>::~ysArrayG()
{
    Destroy();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
void ysArrayG<T>::Create()
{
    m_entries = nullptr;
    m_capacity = 0;
    m_count = 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
void ysArrayG<T>::Destroy()
{
    ysFree(m_entries);
    m_entries = nullptr;
    m_capacity = 0;
    m_count = 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
void ysArrayG<T>::SetCapacity(ys_int32 capacity)
{
    if (m_capacity >= capacity)
    {
        return;
    }
    T* entries = static_cast<T*>(ysMalloc(sizeof(T) * capacity));
    ysMemCpy(entries, m_entries, sizeof(T) * m_count);
    ysSwap(m_entries, entries);
    ysFree(entries);
    m_capacity = capacity;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
void ysArrayG<T>::SetCount(ys_int32 count)
{
    if (count <= m_capacity)
    {
        m_count = count;
        return;
    }
    SetCapacity((count >> 1) + count);
    m_count = count;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
void ysArrayG<T>::PushBack(const T& entry)
{
    if (count == m_capacity)
    {
        ys_int32 capacity = ysMax(m_capacity + 1, (m_capacity >> 1) + m_capacity);
        SetCapacity(capacity);
    }
    m_entries[m_count++] = entry;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
T* ysArrayG<T>::Allocate()
{
    SetCount(m_count + 1);
    return m_entries + (m_count - 1);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
T* ysArrayG<T>::GetEntries()
{
    return m_entries;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
ys_int32 ysArrayG<T>::GetCapacity() const
{
    return m_capacity;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
ys_int32 ysArrayG<T>::GetCount() const
{
    return m_count;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
T& ysArrayG<T>::operator[](ys_int32 i)
{
    ysAssert(0 <= i && i < m_count);
    return m_entries[i];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
const T& ysArrayG<T>::operator[](ys_int32 i) const
{
    ysAssert(0 <= i && i < m_count);
    return m_entries[i];
}