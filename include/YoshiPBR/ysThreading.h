#pragma once

#include "YoshiPBR/ysTypes.h"
#include <atomic>
#include <condition_variable>
#include <thread>

typedef void ysThreadFcn(void* arg);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ysLock
{
    ysLock();
    void Reset();

    void Acquire();
    bool TryAcquire();
    void Release();

    std::atomic<bool> m_acquired;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ysScopedLock
{
    ysScopedLock(ysLock*);
    ~ysScopedLock();

    ysLock* m_lock;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ysSemaphore
{
    ysSemaphore();
    void Reset();
    void Create(ys_uint32 initialValue);
    void Destroy();

    void Signal(ys_uint32 deltaValue);
    void Wait();

    // This is kinda weird. But the internal implementation requires calling the constructor, and we avoid that pattern on the API.
    struct Implementation;
    Implementation* m_implementation;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
struct ysThread
{
    ysThread();
    void Reset();
    void Create(ysThreadFcn* fcn, void* fcnArg);
    void Destroy();
    bool IsJoinable() const;
    void Join();
    std::thread::id GetID() const;

    struct Implementation;
    Implementation* m_implementation;
};